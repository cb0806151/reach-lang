version: 2.1
orbs:
  slack: circleci/slack@4.1.1
  shellcheck: circleci/shellcheck@2.2.0
  jq: circleci/jq@2.2.0

x-docker-creds: &docker-creds
  auth:
    username: $DOCKER_LOGIN
    password: $DOCKER_PASSWORD
x-docker-image: &docker-image
  <<: *docker-creds
  image: reachsh/reach-circle:0.1.2
x-slack-fail: &slack-notify-on-fail
  slack/notify:
    event: fail
    template: basic_fail_1

jobs:
  build-and-test:
    docker:
      - <<: *docker-image
    steps:
      - checkout
      - run:
          name: intentionally fail immediately
          command: exit 1
      - run:
          name: install mo
          command: (curl -sSL https://git.io/get-mo -o mo && chmod +x mo && mv mo /usr/local/bin)
      - run:
          name: hs package.yaml
          command: (cd hs && make package.yaml)
      - restore_cache:
          keys:
            - hs-2-{{ checksum "hs/stack.yaml" }}-{{ checksum "hs/package.yaml" }}
            - hs-2-{{ checksum "hs/stack.yaml" }}
            - hs-2-
            - hs-
      - run:
          name: install hs dependencies
          command: (cd hs && make hs-deps)
      - save_cache:
          key: hs-2-{{ checksum "hs/stack.yaml" }}-{{ checksum "hs/package.yaml" }}
          paths:
            - /root/.stack
            - hs/.stack_work
      - run:
          name: clean hs
          command: (cd hs && make hs-clean)
      - run:
          name: build hs
          command: (cd hs && make hs-build)
      # TODO: split test/check hs and dockerized stuff
      # into separate jobs that reuse the hs build
      - run:
          name: test hs (xml)
          command: (cd hs && make hs-test-xml)
      - store_test_results:
          path: hs/test-reports
      - run:
          name: check hs
          command: (cd hs && make hs-check)
      - store_artifacts:
          path: hs/stan.html
      - setup_remote_docker
      - run:
          name: build ethereum-devnet
          command: (cd scripts/ethereum-devnet && make build)
      # TODO: cache node_modules?
      - run:
          name: dan is losing his mind
          command: |
            git checkout -- js/runner/package.json
            git diff --exit-code HEAD -- js/
            test -f js/runner/package.json
      - run:
          name: build and test js
          command: |
            (cd js && make build test)
          # this NVM stuff appears to be unnecessary now?
          # command: |
          #   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
          #   export NVM_DIR="$HOME/.nvm"
          #   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          #   nvm install 12.18.3
          #   nvm use 12.18.3
          #   (cd js/stdlib && make package.json && npm install)
          #   (cd js && make build test)
      - run:
          name: rebuild examples
          command: (cd examples && make clean-all build-all)
      - run:
          name: run examples
          command: (cd examples && make run-all)
          no_output_timeout: 3m
      - jq/install
      - run:
          name: Is dockerhub up to date?
          command: scripts/docker-check.sh || echo 'XXX allowed to fail'
      - <<: *slack-notify-on-fail

  docs-render:
    # TODO: simpler docker image for docs
    docker:
      - <<: *docker-image
    steps:
      - checkout
      - run:
          name: install pygments-reach
          command: (cd py && make install)
      - run:
          name: render docs
          command: (cd docs-src && make render)
      - store_artifacts:
          path: docs/
      - run:
          name: copy docs to workspace
          command: |
            mkdir -p /tmp/docs_workspace
            cp -r docs /tmp/docs_workspace/
      - persist_to_workspace:
          root: /tmp/docs_workspace
          paths:
            - docs
      - <<: *slack-notify-on-fail

  docs-deploy:
    docker:
      - <<: *docker-creds
        image: circleci/node:9.9.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/docs_workspace
      - run:
          name: Install and configure dependencies
          # gh-pages@3.0.0, not 3.1.0, because:
          # https://github.com/tschaub/gh-pages/issues/354#issuecomment-647801438
          command: |
            # sudo npm install -g --silent gh-pages@3.0.0
            # git config user.email "ci-build@reach.sh"
            # git config user.name "ci-build"
            git config user.email "devbot@reach.sh"
            git config user.name "reachdevbot"
      - add_ssh_keys:
          fingerprints:
            # github:reachdevbot key - CircleCI: reach-sh/reach-lang
            - "83:23:9c:21:6a:74:61:48:20:da:a3:45:79:89:3e:86"
            # - "b5:65:6d:49:4f:fb:c1:77:2c:13:45:b1:d9:f9:71:c6"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            git fetch origin gh-pages
            git checkout gh-pages
            git pull origin gh-pages
            git rm -r .
            cp -r /tmp/docs_workspace/docs/* .
            git add .
            # https://stackoverflow.com/questions/8123674/how-to-git-commit-nothing-without-an-error
            git diff-index --quiet HEAD || git commit -m "[ci skip] docs for $CIRCLE_SHA1"
            git push origin gh-pages
      - <<: *slack-notify-on-fail

  shellcheck:
    docker:
      - <<: *docker-creds
        image: 'cimg/base:stable'
    steps:
      - checkout
      - shellcheck/install
      - run:
          name: Run shellcheck
          command: make sh-lint
      - <<: *slack-notify-on-fail

  docker-lint:
    docker:
      - <<: *docker-creds
        image: 'hadolint/hadolint:v1.18.0-6-ga0d655d-alpine'
    steps:
      - checkout
      - run:
          name: install make, bash, curl, and jq
          command: apk add make bash curl jq
      - run:
          name: run hadolint
          command: make docker-lint
      - <<: *slack-notify-on-fail

  experimental-algorand-devnet:
    docker:
      - <<: *docker-image
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build algorand-devnet
          command: (cd scripts/algorand-devnet && make build)
      - run:
          name: check algorand-devnet
          command: |
            cd scripts/algorand-devnet
            make run &
            sleep 1
            make status
            cd -
          # TODO: a better test, proper wait
      - <<: *slack-notify-on-fail


x-default-job-setup: &default-job-setup
  context:
    - reachdevbot-on-dockerhub
    - circleci-on-slack

workflows:
  build-and-test:
    jobs:
      - build-and-test:
          <<: *default-job-setup

  docs:
    jobs:
      - docs-render:
          <<: *default-job-setup
      - docs-deploy:
          <<: *default-job-setup
          requires:
            - docs-render
          filters:
            branches:
              only: master

  lint:
    jobs:
      - shellcheck:
          <<: *default-job-setup
      - docker-lint:
          <<: *default-job-setup

  # TODO: re-enable / integrate with build-and-test
  # experimental-devnets:
  #   jobs:
  #     - experimental-algorand-devnet
